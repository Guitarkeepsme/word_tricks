from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import games_code
from time import monotonic

t = monotonic()
API_TOKEN = '6070755171:AAFzOBUDrYpsvFNncZULkPA74FkWuB8PT4I'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Forms(StatesGroup):
    start = State()
    back = State()
    from_big = State()
    find_small = State()
    words_sequence = State()
    playing_words_sequence = State()


commands = ["–ò–∑ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ", "–ú–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–∏—Ö", "–í–µ—Ä–Ω—É—Ç—å—Å—è", "–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞"]


@dp.message_handler(Text(equals="–í–µ—Ä–Ω—É—Ç—å—Å—è"), state='*')
async def go_back(message: types.Message):
    buttons = ["–ò–∑ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ", "–ú–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–∏—Ö", "–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞", "–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    await Forms.start.set()
    keyboard.add(*buttons)
    await message.reply("–ß—Ç–æ –∂, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. \n\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É!", reply_markup=keyboard)


@dp.message_handler(commands="start", state="*")
async def send_welcome(message: types.Message):
    buttons = ["–ò–∑ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ", "–ú–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–∏—Ö", "–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*buttons)
    await Forms.start.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç, " + "*" + message.from_user.first_name +
                        "*! üëã \n\n–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞. ""\n–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É!", reply_markup=keyboard,
                        parse_mode='Markdown')


@dp.message_handler(Text(equals="–ò–∑ –±–æ–ª—å—à–æ–≥–æ —Å–ª–æ–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ"), state=Forms.start)
async def from_big(message: types.Message):
    buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*buttons)
    await message.reply("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å–ª–æ–≤.", reply_markup=keyboard)
    await Forms.from_big.set()


@dp.message_handler(state=Forms.from_big)
async def from_big_search(message: types.Message):
    button = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*button)
    answer = games_code.from_big(message.text, games_code.final_result)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await Forms.start.set()
        await go_back
    elif message.text.lower() not in games_code.final_result:
        await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ.",
                            reply_markup=keyboard, parse_mode="Markdown")
    else:
        await message.reply("–ò–∑ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫–∏–µ —Å–ª–æ–≤–∞: \n\n*" +
                            ', '.join(answer) + "*" + "\n\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: *" + str(len(answer)) + "*",
                            parse_mode="Markdown", reply_markup=keyboard)


@dp.message_handler(Text(equals="–ú–∞–ª–µ–Ω—å–∫–æ–µ —Å–ª–æ–≤–æ –≤–Ω—É—Ç—Ä–∏ –±–æ–ª—å—à–∏—Ö"), state=Forms.start)
async def find_small(message: types.Message):
    buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*buttons)
    await message.reply("–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤–∞—Ö.\n\n\n –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, "
                        "—á—Ç–æ —è –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 200 —Å–ª–æ–≤, –Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Ä–∞–∑–Ω—ã—Ö.", reply_markup=keyboard)
    await Forms.find_small.set()


@dp.message_handler(lambda message: message.text not in commands, state=Forms.start)
async def invalid_message(message: types.Message):
    return await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é, –æ —á—ë–º —Ç—ã. –ü—Ä–æ–≤–µ—Ä—å, –≤–µ—Ä–Ω–æ –ª–∏ —Ç—ã –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É.")


@dp.message_handler(state=Forms.find_small)
async def find_small_search(message: types.Message):
    button = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*button)
    answer = games_code.find_small(message.text, games_code.final_result)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await Forms.start.set()
        await go_back
    else:
        await message.reply("–≠—Ç–æ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç–∞–∫–∏—Ö —Å–ª–æ–≤: \n\n*" +
                            ', '.join(answer) + "*" + "\n\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: *" + str(len(answer)) + "*",
                            parse_mode="Markdown", reply_markup=keyboard)


@dp.message_handler(Text(equals="–ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞"), state=Forms.start)
async def words_sequence(message: types.Message):
    buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*buttons)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await Forms.start.set()
        await go_back
    else:
        await Forms.words_sequence.set()
        await message.reply("–î–∞–≤–∞–π –Ω–∞–ø–æ–º–Ω—é –ø—Ä–∞–≤–∏–ª–∞: \n\n–¢—ã –Ω–∞–∑—ã–≤–∞–µ—à—å —Å–ª–æ–≤–æ *(—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ, –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)*, "
                            "–∞ —è –≤ –æ—Ç–≤–µ—Ç –ø–∏—à—É —Å–ª–æ–≤–æ, –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–æ–π —Ç–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞. "
                            "–ó–∞—Ç–µ–º —Ç—ã –¥–µ–ª–∞–µ—à—å —Ç–æ –∂–µ —Å–∞–º–æ–µ. \n–ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–æ —Å–ª–æ–≤–æ, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–µ—Å—è –Ω–∞ –ô, –´, –™, –¨, "
                            "—Å–ª–µ–¥—É—â–µ–º—É –∏–≥—Ä–æ–∫—É –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–ª–æ–≤–æ –Ω–∞ *–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é* –±—É–∫–≤—É. "
                            "–°–ª–æ–≤–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∞ –∏–≥—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.\n\n\n" +
                            "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ.", parse_mode="Markdown", reply_markup=keyboard)


@dp.message_handler(state=Forms.words_sequence)
async def words_sequence(message: types.Message, state: FSMContext):
    button = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*button)
    global used_words
    used_words = [message.text]
    answer = games_code.words_sequence(message.text, games_code.final_result, used_words)
    used_words.append(answer)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await Forms.start.set()
        await go_back
    if message.text.lower() not in games_code.final_result:
        await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ.",
                            reply_markup=keyboard, parse_mode="Markdown")
    else:
        if answer[-1] in games_code.banned_letters:
            answer_cut = answer[:-1]
            async with state.proxy() as current_word:
                current_word['word'] = answer_cut
        else:
            async with state.proxy() as current_word:
                current_word['word'] = answer
        await message.reply("*" + answer + "*", parse_mode="Markdown", reply_markup=keyboard)
        await Forms.playing_words_sequence.set()


@dp.message_handler(lambda message: message.text.lower(), state=Forms.playing_words_sequence)
async def playing_words_sequence(message: types.Message, state: FSMContext):
    button = ["–í–µ—Ä–Ω—É—Ç—å—Å—è"]
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    keyboard.add(*button)
    if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
        await Forms.start.set()
        await go_back
    if message.text.lower() not in games_code.final_result:
        await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ.",
                            reply_markup=keyboard, parse_mode="Markdown")
    elif message.text.lower() in used_words:
        await message.reply("–≠—Ç–æ —É–∂–µ –±—ã–ª–æ. –ù–∞–ø–∏—à–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.",
                            reply_markup=keyboard, parse_mode="Markdown")
    else:
        check_word = await state.get_data()
        if check_word['word'][-1] != message.text.lower()[0]:
            await message.reply("–≠—Ç–æ —Å–ª–æ–≤–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç! –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –±—É–∫–≤—É *" + str(check_word['word'][-1]) + "*",
                                reply_markup=keyboard, parse_mode="Markdown")
        else:
            await Forms.words_sequence.set()
            await state.update_data(word=check_word['word'])
            answer = games_code.words_sequence(message.text, games_code.final_result, used_words)
            used_words.append(answer)

            if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è":
                await Forms.start.set()
                await go_back
            else:
                if answer[-1] in games_code.banned_letters:
                    answer_cut = answer[:-1]
                    async with state.proxy() as current_word:
                        current_word['word'] = answer_cut
                else:
                    async with state.proxy() as current_word:
                        current_word['word'] = answer
                await message.reply("*" + answer + "*", parse_mode="Markdown", reply_markup=keyboard)
                # start_timer = 30
                # timer_message = await bot.send_message(chat_id=message.chat.id, text=f"–û—Å—Ç–∞–ª–æ—Å—å {start_timer} —Å–µ–∫—É–Ω–¥")
                # zero_timer_check = 0
                # for seconds_left in range(start_timer - 1, -1, -1):
                #     await asyncio.sleep(1)
                #     await timer_message.edit_text(f"–û—Å—Ç–∞–ª–æ—Å—å *{seconds_left}* —Å–µ–∫—É–Ω–¥", parse_mode="Markdown")
                #     if seconds_left == 0:
                #         zero_timer_check += 1
                # if zero_timer_check == 1:
                #     await bot.send_message(chat_id=message.chat.id, text="–í—Ä–µ–º—è –≤—ã—à–ª–æ. "
                #                            "*–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!*", parse_mode="Markdown", reply_markup=keyboard)
                if len(answer) == 0:
                    await bot.send_message(chat_id=message.chat.id, text="–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ª–æ–≤–∞, "
                                                                         "–∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã –ø–æ–±–µ–¥–∏–ª–∏.\n\n\n"
                                           "*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!*", parse_mode="Markdown", reply_markup=keyboard)
                used_words.append(answer)
                used_words.append(message.text)
                await Forms.playing_words_sequence.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
